/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juana
 */
public class Consulta extends javax.swing.JFrame {

    /**
     * Creates new form Consulta
     */
    public Consulta() {
        initComponents();
        cargarDatos();
    }

    /**
     * Método para cargar los datos desde la base de datos a la tabla
     */
    private void cargarDatos() {
        // Realizar la consulta SQL para buscar los datos en la base de datos
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");
            String sql = "SELECT * FROM Registro";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet result = statement.executeQuery();

            // Limpiar la tabla antes de llenarla con los nuevos resultados
            DefaultTableModel model = (DefaultTableModel) tbConsulta.getModel();
            model.setRowCount(0);

            // Llenar la tabla con los resultados obtenidos de la base de datos
            while (result.next()) {
                String nombre = result.getString("nombre");
                String apellido = result.getString("apellido");
                String identificacion = result.getString("identificacion");
                String correo = result.getString("correo");
                // Agregar los datos a una nueva fila en la tabla
                model.addRow(new Object[]{nombre, apellido, identificacion, correo});
            }

            // Cerrar la conexión
            connection.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar los datos desde la base de datos: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtIdentificacion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbConsulta = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnConsulta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Consultar profesional");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Identificacion");

        tbConsulta.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Identificacion", "Correo"
            }
        ));
        jScrollPane1.setViewportView(tbConsulta);

        btnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnEditar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnConsulta.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnConsulta.setText("Cita");
        btnConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(txtIdentificacion)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConsulta))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGuardar)
                        .addGap(12, 12, 12)
                        .addComponent(btnEliminar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(btnConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar)
                    .addComponent(btnGuardar))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // Paso 1: Realizar la búsqueda en la base de datos
        String identificacion = txtIdentificacion.getText();

        // Realizar la consulta SQL para buscar los datos en la base de datos
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");
            String sql = "SELECT * FROM Registro WHERE identificacion = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, identificacion);
            ResultSet result = statement.executeQuery();

            // Limpiar la tabla antes de llenarla con los nuevos resultados
            DefaultTableModel model = (DefaultTableModel) tbConsulta.getModel();
            model.setRowCount(0);

            // Llenar la tabla con los resultados obtenidos de la base de datos
            while (result.next()) {
                String nombre = result.getString("nombre");
                String apellido = result.getString("apellido");
                String correo = result.getString("correo");
                // Agregar los datos a una nueva fila en la tabla
                model.addRow(new Object[]{nombre, apellido, identificacion, correo});
            }

            // Cerrar la conexión
            connection.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar los datos: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // Paso 2: Habilitar la edición del dato seleccionado en la tabla
        int filaSeleccionada = tbConsulta.getSelectedRow();
        if (filaSeleccionada != -1) {
            // Obtener los datos de la fila seleccionada
            String nombre = tbConsulta.getValueAt(filaSeleccionada, 0).toString();
            String apellido = tbConsulta.getValueAt(filaSeleccionada, 1).toString();
            String identificacion = tbConsulta.getValueAt(filaSeleccionada, 2).toString();
            String correo = tbConsulta.getValueAt(filaSeleccionada, 3).toString();

            // Establecer un editor de celda personalizado para cada columna
            tbConsulta.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JTextField(nombre)));
            tbConsulta.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(new JTextField(apellido)));
            tbConsulta.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(new JTextField(identificacion)));
            tbConsulta.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new JTextField(correo)));
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para editar.");
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = tbConsulta.getSelectedRow();
    if (filaSeleccionada != -1) {
        DefaultTableModel model = (DefaultTableModel) tbConsulta.getModel();
        // Obtener el identificador único del registro a eliminar
        String identificacion = model.getValueAt(filaSeleccionada, 2).toString();
        
        // Eliminar el registro de la base de datos
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");
            String sql = "DELETE FROM Registro WHERE identificacion = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, identificacion);
            statement.executeUpdate();
            connection.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar el registro de la base de datos: " + ex.getMessage());
            return; // No continuar si hay un error
        }
        
        // Eliminar la fila seleccionada del modelo de la tabla
        model.removeRow(filaSeleccionada);
        
        JOptionPane.showMessageDialog(this, "Fila eliminada correctamente.");
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para eliminar.");
    }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Obtener el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tbConsulta.getModel();
        int rowCount = model.getRowCount();

        // Actualizar los datos en la base de datos
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");

            // Iterar sobre todas las filas de la tabla y actualizar los registros en la base de datos
            for (int i = 0; i < rowCount; i++) {
                String nombre = model.getValueAt(i, 0).toString();
                String apellido = model.getValueAt(i, 1).toString();
                String identificacion = model.getValueAt(i, 2).toString();
                String correo = model.getValueAt(i, 3).toString();

                // Realizar la actualización en la base de datos
                String sql = "UPDATE Registro SET nombre = ?, apellido = ?, correo = ? WHERE identificacion = ?";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setString(1, nombre);
                statement.setString(2, apellido);
                statement.setString(3, correo);
                statement.setString(4, identificacion);
                statement.executeUpdate();
            }

            // Cerrar la conexión
            connection.close();

            JOptionPane.showMessageDialog(this, "Los cambios han sido guardados correctamente.");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar los cambios: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaActionPerformed
        dispose(); // Cerrar la ventana actual
        new Cita().setVisible(true);
    }//GEN-LAST:event_btnConsultaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Consulta().setVisible(true);
            }
        });
    }

    // Define un modelo de tabla personalizado
    DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            // Permitir la edición de las celdas
            return true;
        }
    };

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnConsulta;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbConsulta;
    private javax.swing.JTextField txtIdentificacion;
    // End of variables declaration//GEN-END:variables
}
