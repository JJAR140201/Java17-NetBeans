/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juana
 */
public class Cita extends javax.swing.JFrame {

    /**
     * Creates new form Cita
     */
    public Cita() {
        initComponents();
        actualizarTablaServicios();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTipo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbServicio = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtIdentificacion = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Registo de Servicios");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Tipo de servicio");

        txtTipo.setToolTipText("");

        tbServicio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Tipo Servicio", "Fecha Servicio", "Identificacion", "Nombre", "Apellido ", "Correo"
            }
        ));
        tbServicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbServicioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbServicio);

        btnAgregar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Fecha Servicio");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Identificacion");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Nombre");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Apellido");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Correo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAgregar)
                        .addGap(29, 29, 29)
                        .addComponent(btnGuardar)
                        .addGap(27, 27, 27)
                        .addComponent(btnEliminar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel2)
                                            .addComponent(txtTipo))
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(txtIdentificacion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                                .addComponent(txtFecha, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addGap(18, 18, 18))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(111, 111, 111))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtApellido, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                                    .addComponent(txtNombre)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnEliminar)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Obtener los datos de la fila seleccionada
        int rowIndex = tbServicio.getSelectedRow();

        // Si se seleccionó una fila válida
        if (rowIndex != -1) {
            // Obtener los datos de la fila seleccionada
            String tipoServicio = txtTipo.getText();
            String fechaServicio = txtFecha.getText();
            String identificacion = txtIdentificacion.getText();
            String nombre = txtNombre.getText();
            String apellido = txtApellido.getText();
            String correo = txtCorreo.getText();

            // Realizar la actualización en la base de datos
            try {
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");
                String sql = "UPDATE Cita SET tipo_servicio=?, fecha_servicio=?, nombre_cliente=?, apellido_cliente=?, correo_cliente=? WHERE identificacion_cliente=?";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setString(1, tipoServicio);
                statement.setString(2, fechaServicio);
                statement.setString(3, nombre);
                statement.setString(4, apellido);
                statement.setString(5, correo);
                statement.setString(6, identificacion);
                statement.executeUpdate();

                // Cerrar la conexión
                connection.close();

                // Mostrar un mensaje de éxito
                JOptionPane.showMessageDialog(this, "Cambios guardados correctamente.");

                // Actualizar la tabla de servicios
                actualizarTablaServicios();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al guardar los cambios: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para guardar los cambios.");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Obtener el índice de la fila seleccionada
        int rowIndex = tbServicio.getSelectedRow();

        // Si se seleccionó una fila válida
        if (rowIndex != -1) {
            // Obtener la identificación de la fila seleccionada
            String identificacion = tbServicio.getValueAt(rowIndex, 2).toString();

            // Realizar la eliminación en la base de datos
            try {
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");
                String sql = "DELETE FROM Cita WHERE identificacion_cliente=?";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setString(1, identificacion);
                statement.executeUpdate();

                // Cerrar la conexión
                connection.close();

                // Mostrar un mensaje de éxito
                JOptionPane.showMessageDialog(this, "Registro eliminado correctamente.");

                // Actualizar la tabla de servicios
                actualizarTablaServicios();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al eliminar el registro: " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para eliminar.");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // Obtener los datos ingresados en los campos de texto
        String tipoServicio = txtTipo.getText();
        String fechaServicio = txtFecha.getText();
        String identificacion = txtIdentificacion.getText();
        String nombre = txtNombre.getText();
        String apellido = txtApellido.getText();
        String correo = txtCorreo.getText();

        // Establecer la conexión con la base de datos
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");

            // Realizar la inserción en la base de datos
            String sql = "INSERT INTO Cita (tipo_servicio, fecha_servicio, nombre_cliente, apellido_cliente, correo_cliente, identificacion_cliente) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, tipoServicio);
            statement.setString(2, fechaServicio);
            statement.setString(3, identificacion);
            statement.setString(4, nombre);
            statement.setString(5, apellido);
            statement.setString(6, correo);
            statement.executeUpdate();

            // Cerrar la conexión
            connection.close();

            // Limpiar los campos de texto después de agregar la cita
            txtTipo.setText("");
            txtFecha.setText("");
            txtIdentificacion.setText("");
            txtNombre.setText("");
            txtApellido.setText("");
            txtCorreo.setText("");

            // Mostrar un mensaje de éxito
            JOptionPane.showMessageDialog(this, "Cita agregada correctamente.");

            // Actualizar la tabla de servicios
            actualizarTablaServicios();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al agregar la cita: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tbServicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbServicioMouseClicked
        // Obtener el índice de la fila seleccionada
        int rowIndex = tbServicio.getSelectedRow();

        // Si se hizo clic en una fila válida
        if (rowIndex != -1) {
            // Obtener los datos de la fila seleccionada
            String tipoServicio = tbServicio.getValueAt(rowIndex, 0).toString();
            String fechaServicio = tbServicio.getValueAt(rowIndex, 1).toString();
            String identificacion = tbServicio.getValueAt(rowIndex, 2).toString();
            String nombre = tbServicio.getValueAt(rowIndex, 3).toString();
            String apellido = tbServicio.getValueAt(rowIndex, 4).toString();
            String correo = tbServicio.getValueAt(rowIndex, 5).toString();

            // Realizar la actualización en la base de datos
            try {
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");
                String sql = "UPDATE Cita SET tipo_servicio=?, fecha_servicio=?, nombre_cliente=?, apellido_cliente=?, correo_cliente=? WHERE identificacion_cliente=?";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setString(1, tipoServicio);
                statement.setString(2, fechaServicio);
                statement.setString(3, nombre);
                statement.setString(4, apellido);
                statement.setString(5, correo);
                statement.setString(6, identificacion);
                statement.executeUpdate();

                // Cerrar la conexión
                connection.close();

                // Mostrar un mensaje de éxito
                JOptionPane.showMessageDialog(this, "Cambios guardados correctamente.");

                // Actualizar la tabla de servicios
                actualizarTablaServicios();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al guardar los cambios: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_tbServicioMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbServicio;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtIdentificacion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTipo;
    // End of variables declaration//GEN-END:variables

    private void actualizarTablaServicios() {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/proyecto_final", "root", "root");
            String sql = "SELECT Cita.tipo_servicio, Cita.fecha_servicio, Cita.nombre_cliente, Cita.apellido_cliente, Cita.correo_cliente, Cita.identificacion_cliente\n"
                    + "FROM Cita;";
            PreparedStatement statement = connection.prepareStatement(sql);
            ResultSet result = statement.executeQuery();

            // Limpiar la tabla antes de llenarla con los nuevos resultados
            DefaultTableModel model = (DefaultTableModel) tbServicio.getModel();
            model.setRowCount(0);

            // Llenar la tabla con los resultados obtenidos de la base de datos
            while (result.next()) {
                String tipoServicio = result.getString("tipo_servicio");
                String fechaServicio = result.getString("fecha_servicio");
                String identificacion = result.getString("identificacion_cliente");
                String nombre = result.getString("nombre_cliente");
                String apellido = result.getString("apellido_cliente");
                String correo = result.getString("correo_cliente");
                // Agregar los datos a una nueva fila en la tabla
                model.addRow(new Object[]{tipoServicio, fechaServicio, identificacion, nombre, apellido, correo});
            }

            // Cerrar la conexión
            connection.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar los datos de la cita: " + ex.getMessage());
        }
    }

}
